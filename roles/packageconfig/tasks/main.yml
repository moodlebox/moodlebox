---

- name: Enable exfat and hfsplus formats mounting by udevil
  ansible.builtin.lineinfile:
    path: '/etc/udevil/udevil.conf'
    regexp: '^allowed_types\s*='
    line: 'allowed_types = $KNOWN_FILESYSTEMS, file, cifs, smbfs, nfs, curlftpfs, ftpfs, sshfs, davfs, tmpfs, ramfs, exfat, hfsplus'

- name: Remove nonempty option from default_options_exfat in udevil configuration
  ansible.builtin.lineinfile:
    path: '/etc/udevil/udevil.conf'
    regexp: '^default_options_exfat\s*='
    line: 'default_options_exfat     = nosuid, noexec, nodev, noatime, uid=$UID, gid=$GID, iocharset=utf8'

- name: Add script to be run by root after a successful mount by udevil
  ansible.builtin.lineinfile:
    path: '/etc/udevil/udevil.conf'
    regexp: '^success_rootexec\s*='
    line: 'success_rootexec = /usr/local/bin/fix-mount-permissions.sh'

- name: Copy script to fix USB mount permissions
  ansible.builtin.template:
    src: 'usr/local/bin/fix-mount-permissions.sh.j2'
    dest: '/usr/local/bin/fix-mount-permissions.sh'
    mode: '0755'

- name: Unmask, enable and start devmon service
  ansible.builtin.systemd_service:
    name: 'devmon@{{ moodlebox_username }}'
    state: 'started'
    enabled: 'yes'
    masked: 'no'

- name: Copy nodogsplash deb package file
  ansible.builtin.copy:
    src: 'nodogsplash_5.0.2-1_arm64.deb'
    dest: '/tmp/nodogsplash.deb'
    mode: '0644'

- name: Install nodogsplash package
  ansible.builtin.apt:
    deb: '/tmp/nodogsplash.deb'

- name: Delete nodogsplash deb package file
  ansible.builtin.file:
    path: '/tmp/nodogsplash.deb'
    state: 'absent'

- name: Configure nodogsplash captive portal
  ansible.builtin.template:
    src: 'etc/nodogsplash/nodogsplash.conf.j2'
    dest: '/etc/nodogsplash/nodogsplash.conf'
    mode: '0644'

- name: Disable nodogsplash service at startup
  ansible.builtin.systemd_service:
    name: 'nodogsplash'
    state: 'stopped'
    enabled: 'false'
    masked: 'false'

- name: Remove default nodogsplash files
  ansible.builtin.file:
    path: '/etc/nodogsplash/htdocs'
    state: 'absent'

- name: Update nodogsplash files
  ansible.builtin.copy:
    src: 'etc/nodogsplash/htdocs'
    dest: '/etc/nodogsplash'
    mode: '0644'

- name: Set umask for nginx and php-fpm services
  ansible.builtin.lineinfile:
    path: '{{ item }}'
    line: 'UMask=0002'
    insertafter: '^\[Service\].*'
  with_items:
    - '/lib/systemd/system/nginx.service'
    - '/lib/systemd/system/php8.4-fpm.service'
  notify:
    - Restart web services

- name: Set php timezone
  ansible.builtin.replace:
    path: '{{ item }}'
    regexp: '^;?date.timezone\s*=.*'
    replace: 'date.timezone = {{ moodlebox_timezone }}'
  with_items:
    - '/etc/php/8.4/fpm/php.ini'
    - '/etc/php/8.4/cli/php.ini'
  notify:
    - Restart web services

- name: Set 'group' of php-fpm process
  ansible.builtin.lineinfile:
    path: '/etc/php/8.4/fpm/pool.d/www.conf'
    regexp: '^group\s*=\s*www-data.*'
    line: 'group = 1000'
  notify:
    - Restart web services

- name: Set 'pm.max_requests' of php-fpm process
  ansible.builtin.lineinfile:
    path: '/etc/php/8.4/fpm/pool.d/www.conf'
    regexp: '^;?pm.max_requests\s*=.*'
    line: 'pm.max_requests = 50'
  notify:
    - Restart web services

- name: Set 'emergency_restart_threshold' for php-fpm to fix potential SIGSEGV
  ansible.builtin.lineinfile:
    path: '/etc/php/8.4/fpm/php-fpm.conf'
    regexp: '^;?emergency_restart_threshold\s*=.*'
    line: 'emergency_restart_threshold = 2'
  notify:
    - Restart web services

- name: Set 'emergency_restart_interval' for php-fpm to fix potential SIGSEGV
  ansible.builtin.lineinfile:
    path: '/etc/php/8.4/fpm/php-fpm.conf'
    regexp: '^;?emergency_restart_interval\s*=.*'
    line: 'emergency_restart_interval = 1h'
  notify:
    - Restart web services

- name: Set 'process_control_timeout' for php-fpm to fix potential SIGSEGV
  ansible.builtin.lineinfile:
    path: '/etc/php/8.4/fpm/php-fpm.conf'
    regexp: '^;?process_control_timeout\s*=.*'
    line: 'process_control_timeout = 5s'
  notify:
    - Restart web services

- name: Set 'max_input_vars' to 5000
  ansible.builtin.lineinfile:
    path: '/etc/php/8.4/cli/php.ini'
    regexp: '^;?max_input_vars\s*=.*'
    line: 'max_input_vars = 5000'

- name: Enable git to write to directories owned by anyone
  community.general.git_config:
    name: safe.directory
    scope: global
    value: '*'

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
