---

- name: Switch wireless chip firmware to minimal one for AP mode
  community.general.alternatives:
    name: 'cyfmac43455-sdio.bin'
    path: '/lib/firmware/cypress/cyfmac43455-sdio-minimal.bin'

- name: Set regulatory country with iw
  ansible.builtin.command: 'iw reg set {{ moodlebox_wifi_ap_country }}'
  register: wifi_reg_set_result
  changed_when: 'wifi_reg_set_result.rc == 0'

- name: Set regulatory country in kernel command line
  ansible.builtin.lineinfile:
    path: '/boot/firmware/cmdline.txt'
    regexp: '^(.*?)(\s*cfg80211.ieee80211_regdom=.*)?$'
    line: '\1 cfg80211.ieee80211_regdom={{ moodlebox_wifi_ap_country }}'
    backrefs: true
  notify:
    - Reboot box

- name: Copy udev rule to add wireless interface for AP mode
  ansible.builtin.template:
    src: 'etc/udev/rules.d/90-wireless.rules.j2'
    dest: '/etc/udev/rules.d/90-wireless.rules'
    mode: '0644'
  notify:
    - Reboot box

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Create the wifi client connection
  community.general.nmcli:
    type: wifi
    conn_name: 'WifiSTA'
    ifname: '{{ moodlebox_wifi_sta_interface }}'
    ssid: '{{ moodlebox_wifi_sta_ssid }}'
    wifi_sec:
      key-mgmt: wpa-psk
      psk: '{{ moodlebox_wifi_sta_password }}'
    route_metric4: '99'
    autoconnect: true
    state: present
  notify:
    - Restart networking

- name: Create the wifi access point connection
  community.general.nmcli:
    type: wifi
    conn_name: 'WifiAP'
    ifname: '{{ moodlebox_wifi_ap_interface }}'
    ssid: '{{ moodlebox_wifi_ap_ssid }}'
    wifi:
      mode: ap
      channel: '{{ moodlebox_wifi_ap_channel }}'
      band: bg
      hidden: false
    wifi_sec:
      key-mgmt: wpa-psk
      group: [ccmp]
      pairwise: [ccmp]
      proto: [rsn]
      psk: '{{ moodlebox_wifi_ap_password }}'
    ip4: '{{ moodlebox_ip_address }}'
    gw4: '{{ moodlebox_ip_address | ansible.utils.ipaddr("address") }}'
    method4: shared
    method6: shared
    autoconnect: true
    state: present
  notify:
    - Restart networking

- name: Configure AP settings
  ansible.builtin.template:
    src: 'etc/NetworkManager/dnsmasq-shared.d/00-dhcp.conf'
    dest: '/etc/NetworkManager/dnsmasq-shared.d/00-dhcp.conf'
    mode: '0600'
  notify:
    - Restart networking

- name: Update polkit
  ansible.builtin.copy:
    src: 'etc/polkit-1/rules.d/10-wifimanagement.rules'
    dest: '/etc/polkit-1/rules.d/10-wifimanagement.rules'
    mode: '0644'

- name: Get rfkill files
  ansible.builtin.find:
    paths: '/var/lib/systemd/rfkill'
    patterns: '*:wlan'
  register: wifi_rfkill_wlan

- name: Unblock wifi, since wifi country is set
  ansible.builtin.copy:
    dest: '{{ item.path }}'
    content: '0'
    mode: '0644'
  with_items: '{{ wifi_rfkill_wlan.files }}'
  notify:
    - Restart networking

- name: Get wifi radio status
  ansible.builtin.command:
    cmd: 'nmcli -t radio'
  register: wifi_radio_status
  changed_when: false

- name: Enable wifi radio
  ansible.builtin.command:
    cmd: 'nmcli radio wifi on'
  register: wifi_radio_enabled
  when:
    - "'disabled' in wifi_radio_status.stdout"
  changed_when:
    - wifi_radio_enabled.rc == 0

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
